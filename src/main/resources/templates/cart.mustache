<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .cart-header {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .cart-item img {
            width: 100px;
            height: auto;
            border-radius: 5px;
        }

        .cart-summary {
            background-color: #f1f1f1;
            padding: 20px;
            border-radius: 5px;
        }

        .cart-summary h5 {
            font-size: 18px;
        }

        .checkout-btn {
            background-color: #007bff;
            color: white;
        }
    </style>
</head>
<body>
<div class="container py-5">
    <h1 class="cart-header">Shopping Cart</h1>
    <div class="row">
        <!-- Cart Items -->
        <div class="col-md-8">
            {{#cartItems}}
                <div class="card mb-3">
                    <div class="card-body d-flex align-items-center">
                        <img src="{{product.mainImg}}" alt="{{product.name}}" class="cart-item-img">
                        <div class="ms-3 flex-grow-1">
                            <h5>{{product.name}}</h5>
                            <p class="text-muted small">
                                Quantity:
                                <input type="number" class="form-control quantity-input d-inline-block"
                                       style="width: 70px;" min="1"
                                       data-product-id="{{product.id}}"
                                       value="{{quantity}}">
                            </p>
                        </div>
                        <div class="text-end">
                            <h5>₩ {{product.price}}</h5>
                            <button class="btn btn-outline-danger btn-sm remove-btn" data-product-id="{{product.id}}">
                                Remove
                            </button>
                        </div>
                    </div>
                </div>
            {{/cartItems}}

            <!-- Empty Cart Message -->
            {{^cartItems}}
                <div class="alert alert-warning">
                    Your cart is empty. <a href="/search?query=" class="alert-link">Continue shopping</a>.
                </div>
            {{/cartItems}}
        </div>

        <!-- Cart Summary -->
        <div class="col-md-4">
            <div class="cart-summary">
                <h5>Order Summary</h5>
                <hr>
                <div class="d-flex justify-content-between">
                    <p>Subtotal</p>
                    <p>₩ {{subtotal}}</p>
                </div>
                <div class="d-flex justify-content-between">
                    <p>Shipping</p>
                    <p>₩ {{shipping}}</p>
                </div>
                <hr>
                <div class="d-flex justify-content-between">
                    <p>Total</p>
                    <p>₩ {{total}}</p>
                </div>
                <button class="btn checkout-btn btn-lg w-100 mt-3" id="checkout-btn">Checkout</button>
                <script>
                    document.getElementById('checkout-btn').addEventListener('click', () => {
                        if (confirm('Do you want to place the order?')) {
                            fetch('/orders/create', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' }
                            })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Failed to place the order.');
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        alert(data.message || 'Order placed successfully!');
                                        if (data.redirectUrl) {
                                            location.href = data.redirectUrl;
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error:', error);
                                        alert('An error occurred while placing the order.');
                                    });
                        }
                    });

                </script>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // Remove item event
    document.querySelectorAll('.remove-btn').forEach(btn => {
        btn.addEventListener('click', e => {
            e.preventDefault();
            const productId = btn.getAttribute('data-product-id');

            if (!productId) {
                alert('Product ID is missing!');
                return;
            }

            fetch('/cart/remove', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId })
            })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to remove item from cart.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        alert(data.message || 'Item removed successfully');
                        location.reload();
                    })
                    .catch(error => console.error('Error:', error));
        });
    });

    // Update quantity event
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('change', e => {
            const productId = input.getAttribute('data-product-id');
            const quantity = parseInt(input.value, 10);

            if (quantity <= 0 || isNaN(quantity)) {
                alert('Quantity must be a positive number!');
                input.value = 1; // Reset to 1 if invalid
                return;
            }

            fetch('/cart/update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId, quantity })
            })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to update cart.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.message) {
                            alert(data.message);
                        }
                        location.reload();
                    })
                    .catch(error => console.error('Error:', error));
        });
    });
</script>
</body>
</html>
