<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .cart-header {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .cart-summary {
            background-color: #f1f1f1;
            padding: 20px;
            border-radius: 5px;
        }

        .cart-summary h5 {
            font-size: 18px;
            margin-bottom: 15px;
        }

        .checkout-btn {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }

        .checkout-btn:hover {
            background-color: #0056b3;
        }

        .form-label {
            font-weight: bold;
        }

        .coupon-option {
            font-size: 0.9rem;
            color: #555;
        }

        .text-end h5 {
            display: inline-block;
            margin: 0;
            line-height: 1.5;
            vertical-align: middle;
        }

        .product-price span {
            white-space: nowrap;
        }

        .product-price .price-number {
            font-weight: bold;
        }
    </style>
</head>
<body>
<div class="container py-5">
    <h1 class="cart-header">Shopping Cart</h1>
    <div class="row">
        <!-- Cart Items -->
        <div class="col-md-8">
            {{#cartItems}}
                <div class="card mb-3">
                    <div class="card-body d-flex align-items-center">
                        <img src="{{product.mainImg}}" alt="{{product.name}}" class="cart-item-img">
                        <div class="ms-3 flex-grow-1">
                            <h5>{{product.name}}</h5>
                            <p class="text-muted small">
                                Quantity:
                                <input type="number" class="form-control quantity-input d-inline-block"
                                       style="width: 70px;" min="1"
                                       data-product-id="{{product.id}}"
                                       value="{{quantity}}">
                            </p>
                        </div>
                        <div class="text-end">
                            <h5 class="product-price" data-price="{{product.price}}">
                                <span>₩ <span class="price-number">{{product.price}}</span></span>
                            </h5>
                            <button class="btn btn-outline-danger btn-sm remove-btn" data-product-id="{{product.id}}">
                                Remove
                            </button>
                        </div>
                    </div>
                </div>
            {{/cartItems}}

            {{^cartItems}}
                <div class="alert alert-warning">
                    Your cart is empty. <a href="/search?query=" class="alert-link">Continue shopping</a>.
                </div>
            {{/cartItems}}
        </div>

        <!-- Cart Summary -->
        <div class="col-md-4">
            <div class="cart-summary">
                <h5>Order Summary</h5>
                <hr>
                <div class="d-flex justify-content-between">
                    <p>Subtotal</p>
                    <p id="subtotal">₩ {{subtotal}}</p>
                </div>
                <div class="d-flex justify-content-between">
                    <p>Shipping</p>
                    <p id="shipping">₩ {{shipping}}</p>
                </div>
                <div class="d-flex justify-content-between">
                    <p>Used Points</p>
                    <p id="used-points">₩ 0</p>
                </div>
                <div class="d-flex justify-content-between">
                    <p>Coupon Discount</p>
                    <p id="coupon-discount">₩ 0</p>
                </div>
                <hr>
                <div class="d-flex justify-content-between">
                    <p>Total</p>
                    <p id="total">₩ {{total}}</p>
                </div>
                <hr>

                <!-- Use Points -->
                <div class="mb-3">
                    <label for="use-points" class="form-label">Use Points</label>
                    <input type="number" id="use-points" class="form-control" min="0" placeholder="Enter points to use">
                </div>

                <!-- Select Coupon -->
                <div class="mb-3">
                    <label for="coupon-select" class="form-label">Select Coupon</label>
                    <select id="coupon-select" class="form-control">
                        <option value="" selected>No Coupon</option>
                        {{#coupons}}
                            <option value="{{id}}" class="coupon-option">
                                {{name}} - {{discount}}원 Off (Expires: {{expiryDate}})
                            </option>
                        {{/coupons}}
                    </select>
                </div>

                <button class="btn checkout-btn btn-lg w-100 mt-3" id="apply-discounts-btn">Apply Discounts</button>
                <button class="btn checkout-btn btn-lg w-100 mt-3" id="checkout-btn">Checkout</button>
            </div>
        </div>
    </div>
</div>

<script>
    // 숫자를 쉼표를 추가하고 소수점을 없애는 포맷팅 함수
    function formatPrice(price) {
        return Math.floor(price).toLocaleString('ko-KR');
    }

    // 페이지 로드 시 모든 상품 가격 포맷팅
    window.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.product-price').forEach((element) => {
            const originalPrice = parseFloat(element.getAttribute('data-price'));
            const formattedPrice = formatPrice(originalPrice);
            element.innerHTML = `<span>₩ <span class="price-number">${formattedPrice}</span></span>`;
        });

        // Order summary 초기값 포맷팅
        document.getElementById('subtotal').textContent = `₩ ${formatPrice({{subtotal}})}`;
        document.getElementById('shipping').textContent = `₩ ${formatPrice({{shipping}})}`;
        document.getElementById('total').textContent = `₩ ${formatPrice({{total}})}`;
    });

    // Apply Discounts Script
    document.getElementById('apply-discounts-btn').addEventListener('click', async () => {
        const points = parseInt(document.getElementById('use-points').value) || 0;
        const couponId = document.getElementById('coupon-select').value || null;

        try {
            const response = await fetch('/cart/apply-discounts', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ points, couponId })
            });

            if (response.ok) {
                const data = await response.json();
                document.getElementById('used-points').textContent = `₩ ${formatPrice(data.usedPoints || 0)}`;
                document.getElementById('coupon-discount').textContent = `₩ ${formatPrice(data.couponDiscount || 0)}`;
                document.getElementById('total').textContent = `₩ ${formatPrice(data.discountedTotal || data.total)}`;
                alert(data.message || 'Discounts applied successfully!');
            } else {
                alert('Failed to apply discounts.');
            }
        } catch (error) {
            console.error('Error applying discounts:', error);
            alert('An error occurred while applying discounts.');
        }
    });
    // 수량 변경 시 가격 업데이트
    document.querySelectorAll('.quantity-input').forEach((input) => {
        input.addEventListener('change', async (event) => {
            const productId = event.target.getAttribute('data-product-id');
            const newQuantity = parseInt(event.target.value);

            if (newQuantity < 1) {
                alert('Quantity cannot be less than 1.');
                event.target.value = 1;
                return;
            }

            try {
                const response = await fetch('/cart/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity: newQuantity })
                });

                if (response.ok) {
                    location.reload(); // 페이지를 다시 로드
                } else {
                    const errorData = await response.json();
                    alert(errorData.message);
                    location.reload();
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                alert('An error occurred while updating the quantity.');
            }
        });
    });
    // 항목 삭제
    document.querySelectorAll('.remove-btn').forEach((button) => {
        button.addEventListener('click', async (event) => {
            const productId = event.target.getAttribute('data-product-id');

            if (!confirm('Are you sure you want to remove this item?')) return;

            try {
                const response = await fetch('/cart/remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId })
                });

                if (response.ok) {
                    alert('Item successfully removed.');
                    location.reload(); // 페이지를 다시 로드
                } else {
                    alert('Failed to remove the item.');
                }
            } catch (error) {
                console.error('Error removing item:', error);
                alert('An error occurred while removing the item.');
            }
        });
    });


    // Checkout Script
    document.getElementById('checkout-btn').addEventListener('click', async () => {
        const points = parseInt(document.getElementById('use-points').value) || 0;
        const couponId = document.getElementById('coupon-select').value || null;

        if (confirm('Do you want to place the order?')) {
            try {
                const response = await fetch('/orders/checkout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ points, couponId })
                });

                if (response.ok) {
                    const data = await response.json();
                    alert(data.message || 'Order placed successfully.');
                    if (data.rewardPoints) {
                        alert(`You earned ${formatPrice(data.rewardPoints)}원 points!`);
                    }
                    location.href = '/orders';
                } else {
                    const errorData = await response.json();
                    alert(errorData.message || 'Failed to place the order.');
                }
            } catch (error) {
                console.error('Error placing order:', error);
                alert('An error occurred while placing the order.');
            }
        }
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
